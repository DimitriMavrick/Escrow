/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MultiEscrowInterface extends ethers.utils.Interface {
  functions: {
    "allocations(address)": FunctionFragment;
    "blackListAccounts(address)": FunctionFragment;
    "blacklistAddress(address)": FunctionFragment;
    "changeFirstOwner(address)": FunctionFragment;
    "customAllocation(uint256[])": FunctionFragment;
    "depositEth(address[])": FunctionFragment;
    "firstOwner()": FunctionFragment;
    "getBalance()": FunctionFragment;
    "getStatus(address)": FunctionFragment;
    "getTransactionHistory()": FunctionFragment;
    "owner()": FunctionFragment;
    "recoverBlacklistedFunds(address[])": FunctionFragment;
    "removeFromWhitelist(address)": FunctionFragment;
    "totalEth()": FunctionFragment;
    "transactionHistory(uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "whiteList(uint256)": FunctionFragment;
    "whiteListAccounts(address)": FunctionFragment;
    "whitelistAccounts(address[])": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "allocations", values: [string]): string;
  encodeFunctionData(
    functionFragment: "blackListAccounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "blacklistAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "changeFirstOwner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "customAllocation",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositEth",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "firstOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getStatus", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTransactionHistory",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recoverBlacklistedFunds",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeFromWhitelist",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "totalEth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transactionHistory",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whiteList",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "whiteListAccounts",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistAccounts",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "allocations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blackListAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blacklistAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeFirstOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "customAllocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "depositEth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "firstOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStatus", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recoverBlacklistedFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeFromWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalEth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transactionHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "whiteList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whiteListAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistAccounts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Allocated(address,uint256)": EventFragment;
    "Blacklisted(address)": EventFragment;
    "Deposit(address,uint256)": EventFragment;
    "FirstOwnerChanged(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Recovered(address,uint256)": EventFragment;
    "Whitelisted(address)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Allocated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Blacklisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FirstOwnerChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Recovered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Whitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export class MultiEscrow extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MultiEscrowInterface;

  functions: {
    allocations(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "allocations(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    blackListAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "blackListAccounts(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    blacklistAddress(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "blacklistAddress(address)"(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeFirstOwner(
      newFirstOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "changeFirstOwner(address)"(
      newFirstOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    customAllocation(
      _amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "customAllocation(uint256[])"(
      _amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositEth(
      _benefAccounts: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "depositEth(address[])"(
      _benefAccounts: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    firstOwner(overrides?: CallOverrides): Promise<[string]>;

    "firstOwner()"(overrides?: CallOverrides): Promise<[string]>;

    getBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getStatus(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean] & { isWhitelisted: boolean; isBlacklisted: boolean }
    >;

    "getStatus(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean] & { isWhitelisted: boolean; isBlacklisted: boolean }
    >;

    getTransactionHistory(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber, string] & {
          user: string;
          amount: BigNumber;
          timestamp: BigNumber;
          transactionType: string;
        })[]
      ]
    >;

    "getTransactionHistory()"(
      overrides?: CallOverrides
    ): Promise<
      [
        ([string, BigNumber, BigNumber, string] & {
          user: string;
          amount: BigNumber;
          timestamp: BigNumber;
          transactionType: string;
        })[]
      ]
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    recoverBlacklistedFunds(
      _beneficiary: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "recoverBlacklistedFunds(address[])"(
      _beneficiary: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeFromWhitelist(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeFromWhitelist(address)"(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalEth(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalEth()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transactionHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string] & {
        user: string;
        amount: BigNumber;
        timestamp: BigNumber;
        transactionType: string;
      }
    >;

    "transactionHistory(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string] & {
        user: string;
        amount: BigNumber;
        timestamp: BigNumber;
        transactionType: string;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whiteList(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "whiteList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    whiteListAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "whiteListAccounts(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    whitelistAccounts(
      _benefAccounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "whitelistAccounts(address[])"(
      _benefAccounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allocations(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "allocations(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  blackListAccounts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "blackListAccounts(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  blacklistAddress(
    _beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "blacklistAddress(address)"(
    _beneficiary: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeFirstOwner(
    newFirstOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "changeFirstOwner(address)"(
    newFirstOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  customAllocation(
    _amount: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "customAllocation(uint256[])"(
    _amount: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositEth(
    _benefAccounts: string[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "depositEth(address[])"(
    _benefAccounts: string[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  firstOwner(overrides?: CallOverrides): Promise<string>;

  "firstOwner()"(overrides?: CallOverrides): Promise<string>;

  getBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "getBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  getStatus(
    _account: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean] & { isWhitelisted: boolean; isBlacklisted: boolean }
  >;

  "getStatus(address)"(
    _account: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean] & { isWhitelisted: boolean; isBlacklisted: boolean }
  >;

  getTransactionHistory(
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, string] & {
      user: string;
      amount: BigNumber;
      timestamp: BigNumber;
      transactionType: string;
    })[]
  >;

  "getTransactionHistory()"(
    overrides?: CallOverrides
  ): Promise<
    ([string, BigNumber, BigNumber, string] & {
      user: string;
      amount: BigNumber;
      timestamp: BigNumber;
      transactionType: string;
    })[]
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  recoverBlacklistedFunds(
    _beneficiary: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "recoverBlacklistedFunds(address[])"(
    _beneficiary: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeFromWhitelist(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeFromWhitelist(address)"(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalEth(overrides?: CallOverrides): Promise<BigNumber>;

  "totalEth()"(overrides?: CallOverrides): Promise<BigNumber>;

  transactionHistory(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string] & {
      user: string;
      amount: BigNumber;
      timestamp: BigNumber;
      transactionType: string;
    }
  >;

  "transactionHistory(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, string] & {
      user: string;
      amount: BigNumber;
      timestamp: BigNumber;
      transactionType: string;
    }
  >;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whiteList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "whiteList(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  whiteListAccounts(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "whiteListAccounts(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  whitelistAccounts(
    _benefAccounts: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "whitelistAccounts(address[])"(
    _benefAccounts: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allocations(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "allocations(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blackListAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "blackListAccounts(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    blacklistAddress(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "blacklistAddress(address)"(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<void>;

    changeFirstOwner(
      newFirstOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "changeFirstOwner(address)"(
      newFirstOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    customAllocation(
      _amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "customAllocation(uint256[])"(
      _amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    depositEth(
      _benefAccounts: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "depositEth(address[])"(
      _benefAccounts: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    firstOwner(overrides?: CallOverrides): Promise<string>;

    "firstOwner()"(overrides?: CallOverrides): Promise<string>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStatus(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean] & { isWhitelisted: boolean; isBlacklisted: boolean }
    >;

    "getStatus(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean] & { isWhitelisted: boolean; isBlacklisted: boolean }
    >;

    getTransactionHistory(
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, string] & {
        user: string;
        amount: BigNumber;
        timestamp: BigNumber;
        transactionType: string;
      })[]
    >;

    "getTransactionHistory()"(
      overrides?: CallOverrides
    ): Promise<
      ([string, BigNumber, BigNumber, string] & {
        user: string;
        amount: BigNumber;
        timestamp: BigNumber;
        transactionType: string;
      })[]
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    recoverBlacklistedFunds(
      _beneficiary: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "recoverBlacklistedFunds(address[])"(
      _beneficiary: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    removeFromWhitelist(
      _account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeFromWhitelist(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    totalEth(overrides?: CallOverrides): Promise<BigNumber>;

    "totalEth()"(overrides?: CallOverrides): Promise<BigNumber>;

    transactionHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string] & {
        user: string;
        amount: BigNumber;
        timestamp: BigNumber;
        transactionType: string;
      }
    >;

    "transactionHistory(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, string] & {
        user: string;
        amount: BigNumber;
        timestamp: BigNumber;
        transactionType: string;
      }
    >;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whiteList(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "whiteList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    whiteListAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "whiteListAccounts(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    whitelistAccounts(
      _benefAccounts: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "whitelistAccounts(address[])"(
      _benefAccounts: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    "withdraw()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    Allocated(
      beneficiary: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { beneficiary: string; amount: BigNumber }
    >;

    Blacklisted(
      beneficiary: string | null
    ): TypedEventFilter<[string], { beneficiary: string }>;

    Deposit(
      from: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; amount: BigNumber }
    >;

    FirstOwnerChanged(
      previousFirstOwner: string | null,
      newFirstOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousFirstOwner: string; newFirstOwner: string }
    >;

    OwnershipTransferred(
      previousOwner: string | null,
      newOwner: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    Recovered(
      to: string | null,
      amount: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

    Whitelisted(
      beneficiary: string | null
    ): TypedEventFilter<[string], { beneficiary: string }>;

    Withdrawn(
      beneficiary: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { beneficiary: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    allocations(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "allocations(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blackListAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "blackListAccounts(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    blacklistAddress(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "blacklistAddress(address)"(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeFirstOwner(
      newFirstOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "changeFirstOwner(address)"(
      newFirstOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    customAllocation(
      _amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "customAllocation(uint256[])"(
      _amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositEth(
      _benefAccounts: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "depositEth(address[])"(
      _benefAccounts: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    firstOwner(overrides?: CallOverrides): Promise<BigNumber>;

    "firstOwner()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getStatus(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "getStatus(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransactionHistory(overrides?: CallOverrides): Promise<BigNumber>;

    "getTransactionHistory()"(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    recoverBlacklistedFunds(
      _beneficiary: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "recoverBlacklistedFunds(address[])"(
      _beneficiary: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeFromWhitelist(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeFromWhitelist(address)"(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalEth(overrides?: CallOverrides): Promise<BigNumber>;

    "totalEth()"(overrides?: CallOverrides): Promise<BigNumber>;

    transactionHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "transactionHistory(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whiteList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whiteList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whiteListAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whiteListAccounts(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whitelistAccounts(
      _benefAccounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "whitelistAccounts(address[])"(
      _benefAccounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allocations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allocations(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blackListAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "blackListAccounts(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blacklistAddress(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "blacklistAddress(address)"(
      _beneficiary: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeFirstOwner(
      newFirstOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "changeFirstOwner(address)"(
      newFirstOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    customAllocation(
      _amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "customAllocation(uint256[])"(
      _amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositEth(
      _benefAccounts: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "depositEth(address[])"(
      _benefAccounts: string[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    firstOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "firstOwner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getStatus(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getStatus(address)"(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransactionHistory(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getTransactionHistory()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    recoverBlacklistedFunds(
      _beneficiary: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "recoverBlacklistedFunds(address[])"(
      _beneficiary: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeFromWhitelist(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeFromWhitelist(address)"(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalEth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalEth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transactionHistory(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "transactionHistory(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whiteList(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whiteList(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whiteListAccounts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whiteListAccounts(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whitelistAccounts(
      _benefAccounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "whitelistAccounts(address[])"(
      _benefAccounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
